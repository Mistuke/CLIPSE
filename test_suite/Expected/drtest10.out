TRUE
CLIPS> (batch "drtest10.bat")
TRUE
CLIPS> (clear)                   ; Memory Leak #1
CLIPS> (progn (release-mem) TRUE)
TRUE
CLIPS> (mem-used)
1697966  ;; Can be different
CLIPS> (defclass SOURCE (is-a USER))
CLIPS> 
(deffunction foo()
   (do-for-all-instances ((?x SOURCE)) TRUE
      (bind ?y 0)
      (bogus)))

[EXPRNPSR3] Missing function declaration for bogus.

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for instance-set query function.

ERROR:
(deffunction MAIN::foo
   ()
   (do-for-all-instances ((?x SOURCE))
      TRUE
      (bind ?y 0)
      (
CLIPS> (clear)                   ; Memory Leak #2
CLIPS> (progn (release-mem) TRUE)
TRUE
CLIPS> (mem-used)
1698150 ;; Reference mem-used number
CLIPS> (defclass SOURCE (is-a USER))
CLIPS> 
(deffunction foo()
   (do-for-all-instances ((?x SOURCE)) (progn (bind ?y 3) (bogus) TRUE)
      (+ 3 4)))

[EXPRNPSR3] Missing function declaration for bogus.

ERROR:
(deffunction MAIN::foo
   ()
   (do-for-all-instances ((?x SOURCE))
      (progn
         (bind ?y 3)
         (
CLIPS> (clear)                   ; Memory Leak #3
CLIPS> (progn (release-mem) TRUE)
TRUE
CLIPS> (mem-used)
1698150 ;; Should be the same as above
CLIPS> (deftemplate SOURCE)
CLIPS> 
(deffunction foo()
   (do-for-all-facts ((?x SOURCE)) TRUE
      (bind ?y 0)
      (bogus)))

[EXPRNPSR3] Missing function declaration for bogus.

[PRNTUTIL2] Syntax Error:  Check appropriate syntax for fact-set query function.

ERROR:
(deffunction MAIN::foo
   ()
   (do-for-all-facts ((?x SOURCE))
      TRUE
      (bind ?y 0)
      (
CLIPS> (clear)                   ; Memory Leak #41
CLIPS> (progn (release-mem) TRUE)
TRUE
CLIPS> (mem-used)
1698150 ;; Should be the same as above
CLIPS> (deftemplate SOURCE)
CLIPS> 
(deffunction foo()
   (do-for-all-facts ((?x SOURCE)) (progn (bind ?y 3) (bogus) TRUE)
      (+ 3 4)))

[EXPRNPSR3] Missing function declaration for bogus.

ERROR:
(deffunction MAIN::foo
   ()
   (do-for-all-facts ((?x SOURCE))
      (progn
         (bind ?y 3)
         (
CLIPS> (clear)                   ; Memory Leak #5
CLIPS> (progn (release-mem) TRUE)
TRUE
CLIPS> (mem-used)
1698150 ;; Should be the same as above
CLIPS> 
(defclass FOO (is-a USER)
   (slot value1))
CLIPS> 
(deffunction foo ()
   (make-instance of FOO
      (value1 (bogus))))

[EXPRNPSR3] Missing function declaration for bogus.

ERROR:
(deffunction MAIN::foo
   ()
   (make-instance of FOO
      (value1 (bogus
CLIPS> (clear)                   ; Memory Leak #6
CLIPS> (progn (release-mem) TRUE)
TRUE
CLIPS> (mem-used)
1698150 ;; Should be the same as above
CLIPS> 
(deftemplate FOO
   (slot value1 (type SYMBOL)))
CLIPS> 
(defrule foo
   (FOO (value1 ?x))
   =>
   (+ ?x 1)
   (printout t ?x))

[RULECSTR3] Previous variable bindings of ?x caused the type restrictions
for argument #1 of the expression (+ ?x 1)
found in the rule's RHS to be violated.

ERROR:
(defrule MAIN::foo
   (FOO (value1 ?x))
   =>
   (+ ?x 1)
   (printout t ?x))
CLIPS> (clear)
CLIPS> (progn (release-mem) TRUE)
TRUE
CLIPS> (mem-used)
1698150 ;; Should be the same as above
CLIPS> (clear)
CLIPS> 
(deftemplate nar 
   (slot bc))
CLIPS> 
(defrule migrant 
   (test (eq 1 1))
   (nar (bc ?bc))
   =>
   (printout t ?bc crlf))
CLIPS> 
(deffacts stuff
   (nar  (bc "US")))
CLIPS> (reset)
CLIPS> (run)
US
CLIPS> (clear)                   ; SourceForge Bug #12
CLIPS> (defclass Test (is-a USER) (multislot Contents))
CLIPS> (make-instance of Test (Contents a b c d e f g h))
[gen508]
CLIPS> 
(defrule BrokenPatternMatchBehavior-Object
   (object (is-a Test) 
           (Contents $?first ?second ?third $?fourth ?fifth))
   =>
   (printout t ?first " " ?second " " ?third " " ?fourth " " ?fifth crlf))
CLIPS> (run)
(a b c d e) f g () h
(a b c d) e f (g) h
(a b c) d e (f g) h
(a b) c d (e f g) h
(a) b c (d e f g) h
() a b (c d e f g) h
CLIPS> (clear) ;; CLIPSESG Bug
CLIPS> 
(defclass A (is-a USER)
  (role concrete)
  (slot foo)
  (slot bar))
CLIPS> (make-instance a of A)
[a]
CLIPS> (watch all)
CLIPS> (modify-instance a (foo 0))
MSG >> direct-modify ED:1 (<Instance-a> <Pointer-0x608000442070>) ;; Reference Pointer
HND >> direct-modify primary in class USER
       ED:1 (<Instance-a> <Pointer-0x608000442070>)               ;; Should be the same as above
::= local slot foo in instance a <- 0
HND << direct-modify primary in class USER
       ED:1 (<Instance-a> <Pointer-0x608000442070>)               ;; Should be the same as above
MSG << direct-modify ED:1 (<Instance-a> <Pointer-0x608000442070>) ;; Should be the same as above
TRUE
CLIPS> (unwatch all)
CLIPS> (clear) ;; CLIPSESG Bug
CLIPS> 
(defclass A
  (is-a USER)
  (role concrete)
  (slot one (type STRING))
  (slot two (type SYMBOL) (allowed-values TRUE FALSE) (default TRUE)))
CLIPS> 
(definstances TEST (a1 of A) (a2 of A) (a3 of A))
CLIPS> 
(defrule rule1
  ?obj <- (object (is-a A) (name [a1]))
  =>
  (message-modify-instance ?obj (one "a") (two FALSE))
  (send ?obj print))
CLIPS> 
(defrule rule2
  ?obj <- (object (is-a A) (name [a2]))
  =>
  (message-modify-instance ?obj (two FALSE) (one "a"))
  (send ?obj print))
CLIPS> 
(defrule rule3
  ?obj <- (object (is-a A) (name [a3]))
  =>
  (modify-instance ?obj (two FALSE) (one "a"))
  (send ?obj print))
CLIPS> (reset)
CLIPS> (run)
[a3] of A
(one "a")
(two FALSE)
[a2] of A
(one "a")
(two FALSE)
[a1] of A
(one "a")
(two FALSE)
CLIPS> (clear) ;; CLIPSESG Crash Bug
CLIPS> 
(defrule bug
   (dummy)
   (foo ?x)
   (not (and (huge ?x)
             (not (and (test (eq ?x 1))
                       (bar ?x)))))
   =>)
CLIPS> (reset)
CLIPS> (assert (bar 1))
<Fact-1>
CLIPS> (assert (huge 1))
<Fact-2>
CLIPS> (dribble-off)
